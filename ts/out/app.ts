/* Developed by Kamran A-eff */class Category { id: number; name: string; subName: string; constructor(id: number, name: string, subName: string) { this.id = id; this.name = name; this.subName = subName; } } class DataSet { label: string; data: number[]; backgroundColor: string; borderColor: string; borderWidth: number; yAxisID: string; constructor(label: string, border: number, yAxisID: string, bgColor: string, borderColor: string) { this.label = label; this.borderWidth = border; this.data = []; this.backgroundColor = bgColor; this.borderColor = borderColor; /*  this.yAxisID = yAxisID; */    }  } class Extension { static getIndex<T>(arr: T[], item: T, key: string): number { for (let index = 0; index < arr.length; index++) { const element = arr[index]; if (element[key] == item[key]) { return index; } } return -1; } static getIndexById<T>(arr: T[], id: number): number { for (let index = 0; index < arr.length; index++) { const element = arr[index]; if (element['id'] == id) { return index; } } return -1; } static getRndInt(min, max) { return Math.floor(Math.random() * (max - min)) + min; } static formatString(val, format) { val = format.substr(0, format.length - val.length) + val; return val; } static distinct<T>(arr: T[], key: string = "id") { return arr.filter(function (value, index, self) { return Extension.getIndexById(self, value[key]) == index; }); } static distinctSimple<T>(arr: T[]) { return arr.filter(function (value, index, self) { return self.indexOf(value) == index; }); }  }  interface ICategory { createCategory(category: Category): void; updateCategory(category: Category): Category; deleteCategory(category: Category): void; getCategories(): Category[]; getCategory(id:number):Category; }  class InMemoryDb implements ICategory, IProduct, ISaleHistory { categories: Category[]; products: Product[]; people: Person[]; saleHistory: SaleHistory[]; constructor() { this.categories = new Array<Category>(); this.products = new Array<Product>(); this.people = new Array<Person>(); this.saleHistory = new Array<SaleHistory>(); } createCategory(category: Category): void { this.categories.push(category); } updateCategory(category: Category): Category { let findedIndex = Extension.getIndex(this.categories, category, "id"); if (findedIndex != -1) { this.categories[findedIndex].name = category.name; this.categories[findedIndex].subName = category.subName; } else { throw new Error(`Couldn't find item`); } return this.categories[findedIndex]; } deleteCategory(category: Category): void { let findedIndex = Extension.getIndex(this.categories, category, "id"); if (findedIndex != -1) { this.categories.splice(findedIndex, 1); } else { throw new Error(`Couldn't find item`); } } getCategories(): Category[] { return this.categories; } getCategory(id: number): Category { let findedIndex = Extension.getIndexById(this.categories, id); if (findedIndex == -1) throw new Error(`Couldn't find item`); return this.categories[findedIndex]; } createProduct(product: Product): void { this.products.push(product); } updateProduct(product: Product): Product { let findedIndex = Extension.getIndex(this.products, product, "id"); if (findedIndex != -1) { this.products[findedIndex].name = product.name; this.products[findedIndex].description = product.description; } else { throw new Error(`Couldn't find item`); } return this.products[findedIndex]; } deleteProduct(product: Product): void { let findedIndex = Extension.getIndex(this.products, product, "id"); if (findedIndex != -1) { this.products.splice(findedIndex, 1); } else { throw new Error(`Couldn't find item`); } } getProducts(): Product[] { return this.products; } getProduct(id: number): Product { let findedIndex = Extension.getIndexById(this.products, id); if (findedIndex == -1) throw new Error(`Couldn't find item`); return this.products[findedIndex]; } createSaleHistory(saleHistory: SaleHistory): void { this.saleHistory.push(saleHistory); } updateSaleHistory(saleHistory: SaleHistory): SaleHistory { let findedIndex = Extension.getIndex(this.saleHistory, saleHistory, "id"); if (findedIndex != -1) { this.saleHistory[findedIndex].personId = saleHistory.personId; this.saleHistory[findedIndex].praductPrice = saleHistory.praductPrice; this.saleHistory[findedIndex].productId = saleHistory.productId; } else { throw new Error(`Couldn't find item`); } return this.saleHistory[findedIndex]; } deleteSaleHistory(saleHistory: SaleHistory): void { let findedIndex = Extension.getIndex(this.saleHistory, saleHistory, "id"); if (findedIndex != -1) { this.saleHistory.splice(findedIndex, 1); } else { throw new Error(`Couldn't find item`); } } getSaleHistories(): SaleHistory[] { return this.saleHistory; } getSaleHistory(id: number): SaleHistory { let findedIndex = Extension.getIndexById(this.saleHistory, id); if (findedIndex == -1) throw new Error(`Couldn't find item`); return this.saleHistory[findedIndex]; } }  interface IProduct { createProduct(Product: Product): void; updateProduct(Product: Product): Product; deleteProduct(Product: Product): void; getProducts(): Product[]; getProduct(id:number):Product; }  interface ISaleHistory { createSaleHistory(saleHistory: SaleHistory): void; updateSaleHistory(saleHistory: SaleHistory): SaleHistory; deleteSaleHistory(saleHistory: SaleHistory): void; getSaleHistories(): SaleHistory[]; getSaleHistory(id: number): SaleHistory; } class Person { id: number; name: string; constructor(id: number, name: string) { this.id = id; this.name = name; } }  class Product { id: number; name: string; description: string; category: Category; price: number; constructor(id: number, name: string) { this.id = id; this.name = name; } setCategory(category: Category) { this.category = category; } setPrice(price: number) { this.price = price; } } class SaleHistory { id: number; productId: number; praductPrice: number; personId: number; date:Date; /** * */ constructor(id: number,productId: number,praductPrice: number,personId: number,date:Date) { this.id=id; this.productId=productId; this.praductPrice=praductPrice; this.personId=personId; this.date=date; } }  /* using */ let db = new InMemoryDb(); db.createCategory(new Category(1, "Category Name - 1", 'Category Subname - 1')); db.createCategory(new Category(2, "Category Name - 2", 'Category Subname - 2')); let product1 = new Product(1, 'Product-1'); product1.setPrice(20); product1.setCategory(db.getCategory(1)); db.createProduct(product1); let product2 = new Product(2, 'Product-2'); product2.setPrice(22.5); product2.setCategory(db.getCategory(1)); db.createProduct(product2); let product3 = new Product(3, 'Product-3'); product3.setPrice(29.50); product3.setCategory(db.getCategory(2)); db.createProduct(product3); db.createSaleHistory(new SaleHistory(1, 1, 20, 1, new Date('2018-01-01T12:30:00'))); db.createSaleHistory(new SaleHistory(2, 1, 22, 1, new Date('2018-01-03T12:30:00'))); db.createSaleHistory(new SaleHistory(3, 1, 25, 1, new Date('2018-01-21T12:30:00'))); db.createSaleHistory(new SaleHistory(4, 1, 12, 1, new Date('2018-02-01T12:30:00'))); db.createSaleHistory(new SaleHistory(5, 1, 18, 1, new Date('2018-03-03T12:30:00'))); db.createSaleHistory(new SaleHistory(6, 1, 20, 1, new Date('2018-04-21T12:30:00'))); db.createSaleHistory(new SaleHistory(7, 2, 15, 1, new Date('2018-01-01T12:30:00'))); db.createSaleHistory(new SaleHistory(8, 2, 20, 1, new Date('2018-01-19T12:30:00'))); db.createSaleHistory(new SaleHistory(8, 2, 20, 1, new Date('2018-01-12T12:30:00'))); db.createSaleHistory(new SaleHistory(9, 3, 5, 1, new Date('2018-01-12T12:30:00'))); function compareSaleHistory(a, b) { if (a.date < b.date) { return -1; } if (a.date > b.date) { return 1; } return 0; } function dFormat(d: Date): string { return `${Extension.formatString(d.getFullYear().toString(), "0000")}.${Extension.formatString((d.getMonth() + 1).toString(), "00")}.${Extension.formatString((d.getDate()).toString(), "00")} ${Extension.formatString((d.getHours()).toString(), "00")}:${Extension.formatString((d.getMinutes()).toString(), "00")}:${Extension.formatString((d.getSeconds()).toString(), "00")}` } let chartRepo = { labels: Extension.distinctSimple(db.saleHistory.sort(compareSaleHistory).map(s => dFormat(s.date))), yAxes: [], datasets: new Array<DataSet>() }; let distinctProduct = Extension.distinct(db.saleHistory.sort(compareSaleHistory).map(e => { return { id: e.productId, label: db.getProduct(e.productId).name } })); distinctProduct.forEach(p => {/* product */  let r = Extension.getRndInt(0, 255), g = Extension.getRndInt(0, 255), b = Extension.getRndInt(0, 255); let ds = new DataSet(p.label, 1, `y-${p.id}`, `rgba(${r},${g},${b},.3)`, `rgb(${r},${g},${b})`); chartRepo.labels.forEach(l => {/* tarixler */    let val = db.saleHistory.filter(function (current, index, self) { return current.productId == p.id && dFormat(current.date) == l; })[0] || { praductPrice: 0 }; ds.data.push(val.praductPrice); }); chartRepo.yAxes.push({ id: `y-${p.id}` }); chartRepo.datasets.push(ds); }); 